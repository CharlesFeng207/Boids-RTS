#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Boid {
    float2 position;
    float2 flockCentre;
    float2 seperateHeading;
    int numFlockmates;
    int isPlayer;
};

RWStructuredBuffer<Boid> boids;
int numBoids;
float viewRadius;
float seperateRadius;

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numBoids; indexB ++) {
        if (id.x != indexB) {
            Boid boidB = boids[indexB];
            float2 offset = boidB.position - boids[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y;

            if (sqrDst < viewRadius * viewRadius) {
                boids[id.x].numFlockmates += 1;
                boids[id.x].flockCentre += boidB.position;

                if (sqrDst < seperateRadius * seperateRadius) {
                    float2 v = offset / sqrDst;
                    if(boidB.isPlayer > 0)
                        v = v * 10;
                    boids[id.x].seperateHeading -= v;
                }
            }
        }
    }
}